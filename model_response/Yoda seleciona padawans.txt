### Tarefa 1: Análise do Problema

#### Regras Explícitas
1. A entrada começa com um inteiro `N`, que representa a quantidade de jovens Jedi interessados.
2. Para cada jovem Jedi, são fornecidos:
   - Um nome (string de até 5 caracteres alfabéticos maiúsculos).
   - Um inteiro `M` (número de missões atribuídas).
   - Um inteiro `P` (número de missões não cumpridas).
3. A saída deve listar os nomes dos jovens Jedi em ordem crescente, junto com o número de missões completadas (calculado como `M - P`).

#### Restrições Implícitas
1. Os nomes dos jovens Jedi são únicos.
2. O número de missões não cumpridas `P` não pode ser maior que o número de missões atribuídas `M` (ou seja, `0 <= P <= M`).
3. O número total de jovens Jedi `N` está entre 1 e 1000.

#### Condições Excepcionais
1. Se `N` for 1, a saída deve ser apenas um jovem Jedi.
2. Se todos os jovens Jedi não cumprirem suas missões, a saída ainda deve ser válida, mostrando `0` para as missões completadas.
3. A ordenação deve ser feita com base nos nomes, que são strings.

### Tarefa 2: Implementação da Solução

Aqui está a implementação da solução em Python:

```python
def selecionar_padawans(jovens):
    padawans = []
    
    for jovem in jovens:
        nome, M, P = jovem.split()
        M = int(M)
        P = int(P)
        completadas = M - P
        padawans.append((nome, completadas))
    
    # Ordenar por nome
    padawans.sort(key=lambda x: x[0])
    
    # Formatar a saída
    resultado = []
    for nome, completadas in padawans:
        resultado.append(f"{nome} {completadas}")
    
    return "\n".join(resultado)

# Testando com os casos de exemplo
casos_de_exemplo = [
    {
        'entrada': '4\nABCDE 4 2\nBCDEF 5 2\nCDEFG 4 1\nBEFGH 4 0',
        'saida': 'ABCDE 2\nBCDEF 3\nBEFGH 4\nCDEFG 3'
    },
    {
        'entrada': '3\nABCDE 3 3\nBCDEF 2 0\nABCDF 3 2',
        'saida': 'ABCDE 0\nABCDF 1\nBCDEF 2'
    }
]

for caso in casos_de_exemplo:
    entrada = caso['entrada'].strip().split('\n')[1:]  # Ignora a primeira linha
    resultado = selecionar_padawans(entrada)
    assert resultado == caso['saida'], f"Erro: {resultado} != {caso['saida']}"

print("Todos os casos de exemplo passaram.")
```

### Tarefa 3: Geração de Novos Casos de Teste

Aqui estão 15 novos casos de teste:

#### Casos Simples
1. 
```
Entrada:
1
A 1 0
Saída:
A 1
```

2. 
```
Entrada:
1
B 1 1
Saída:
B 0
```

#### Casos Médios
3. 
```
Entrada:
3
AAA 3 1
BBB 2 0
CCC 4 2
Saída:
AAA 2
BBB 2
CCC 2
```

4. 
```
Entrada:
4
Z 5 3
Y 4 1
X 2 0
W 3 2
Saída:
W 1
X 2
Y 3
Z 2
```

#### Casos Complexos
5. 
```
Entrada:
10
A 10 5
B 10 4
C 10 3
D 10 2
E 10 1
F 10 0
G 10 5
H 10 4
I 10 3
J 10 2
Saída:
F 10
E 9
D 8
C 7
B 6
A 5
H 6
I 7
J 8
G 5
```

6. 
```
Entrada:
100
A 100 0
B 100 0
C 100 0
D 100 0
E 100 0
F 100 0
G 100 0
H 100 0
I 100 0
J 100 0
K 100 0
L 100 0
M 100 0
N 100 0
O 100 0
P 100 0
Q 100 0
R 100 0
S 100 0
T 100 0
U 100 0
V 100 0
W 100 0
X 100 0
Y 100 0
Z 100 0
AA 100 0
AB 100 0
AC 100 0
AD 100 0
AE 100 0
AF 100 0
AG 100 0
AH 100 0
AI 100 0
AJ 100 0
AK 100 0
AL 100 0
AM 100 0
AN 100 0
AO 100 0
AP 100 0
AQ 100 0
AR 100 0
AS 100 0
AT 100 0
AU 100 0
AV 100 0
AW 100 0
AX 100 0
AY 100 0
AZ 100 0
BA 100 0
BB 100 0
BC 100 0
BD 100 0
BE 100 0
BF 100 0
BG 100 0
BH 100 0
BI 100 0
BJ 100 0
BK 100 0
BL 100 0
BM 100 0
BN 100 0
BO 100 0
BP 100 0
BQ 100 0
BR 100 0
BS 100 0
BT 100 0
BU 100 0
BV 100 0
BW 100 0
BX 100 0
BY 100 0
BZ 100 0
CA 100 0
CB 100 0
CC 100 0
CD 100 0
CE 100 0
CF 100 0
CG 100 0
CH 100 0
CI 100 0
CJ 100 0
CK 100 0
CL 100 0
CM 100 0
CN 100 0
CO 100 0
CP 100 0
CQ 100 0
CR 100 0
CS 100 0
CT 100 0
CU 100 0
CV 100 0
CW 100 0
CX 100 0
CY 100 0
CZ 100 0
DA 100 0
DB 100 0
DC 100 0
DD 100 0
DE 100 0
DF 100 0
DG 100 0
DH 100 0
DI 100 0
DJ 100 0
DK 100 0
DL 100 0
DM 100 0
DN 100 0
DO 100 0
DP 100 0
DQ 100 0
DR 100 0
DS 100 0
DT 100 0
DU 100 0
DV 100 0
DW 100 0
DX 100 0
DY 100 0
DZ 100 0
EA 100 0
EB 100 0
EC 100 0
ED 100 0
EE 100 0
EF 100 0
EG 100 0
EH 100 0
EI 100 0
EJ 100 0
EK 100 0
EL 100 0
EM 100 0
EN 100 0
EO 100 0
EP 100 0
EQ 100 0
ER 100 0
ES 100 0
ET 100 0
EU 100 0
EV 100 0
EW 100 0
EX 100 0
EY 100 0
EZ 100 0
FA 100 0
FB 100 0
FC 100 0
FD 100 0
FE 100 0
FF 100 0
FG 100 0
FH 100 0
FI 100 0
FJ 100 0
FK 100 0
FL 100 0
FM 100 0
FN 100 0
FO 100 0
FP 100 0
FQ 100 0
FR 100 0
FS 100 0
FT 100 0
FU 100 0
FV 100 0
FW 100 0
FX 100 0
FY 100 0
FZ 100 0
GA 100 0
GB 100 0
GC 100 0
GD 100 0
GE 100 0
GF 100 0
GG 100 0
GH 100 0
GI 100 0
GJ 100 0
GK 100 0
GL 100 0
GM 100 0
GN 100 0
GO 100 0
GP 100 0
GQ 100 0
GR 100 0
GS 100 0
GT 100 0
GU 100 0
GV 100 0
GW 100 0
GX 100 0
GY 100 0
GZ 100 0
HA 100 0
HB 100 0
HC 100 0
HD 100 0
HE 100 0
HF 100 0
HG 100 0
HH 100 0
HI 100 0
HJ 100 0
HK 100 0
HL 100 0
HM 100 0
HN 100 0
HO 100 0
HP 100 0
HQ 100 0
HR 100 0
HS 100 0
HT 100 0
HU 100 0
HV 100 0
HW 100 0
HX 100 0
HY 100 0
HZ 100 0
IA 100 0
IB 100 0
IC 100 0
ID 100 0
IE 100 0
IF 100 0
IG 100 0
IH 100 0
II 100 0
IJ 100 0
IK 100 0
IL 100 0
IM 100 0
IN 100 0
IO 100 0
IP 100 0
IQ 100 0
IR 100 0
IS 100 0
IT 100 0
IU 100 0
IV 100 0
IW 100 0
IX 100 0
IY 100 0
IZ 100 0
JA 100 0
JB 100 0
JC 100 0
JD 100 0
JE 100 0
JF 100 0
JG 100 0
JH 100 0
JI 100 0
JJ 100 0
JK 100 0
JL 100 0
JM 100 0
JN 100 0
JO 100 0
JP 100 0
JQ 100 0
JR 100 0
JS 100 0
JT 100 0
JU 100 0
JV 100 0
JW 100 0
JX 100 0
JY 100 0
JZ 100 0
KA 100 0
KB 100 0
KC 100 0
KD 100 0
KE 100 0
KF 100 0
KG 100 0
KH 100 0
KI 100 0
KJ 100 0
KK 100 0
KL 100 0
KM 100 0
KN 100 0
KO 100 0
KP 100 0
KQ 100 0
KR 100 0
KS 100 0
KT 100 0
KU 100 0
KV 100 0
KW 100 0
KX 100 0
KY 100 0
KZ 100 0
LA 100 0
LB 100 0
LC 100 0
LD 100 0
LE 100 0
LF 100 0
LG 100 0
LH 100 0
LI 100 0
LJ 100 0
LK 100 0
LL 100 0
LM 100 0
LN 100 0
LO 100 0
LP 100 0
LQ 100 0
LR 100 0
LS 100 0
LT 100 0
LU 100 0
LV 100 0
LW 100 0
LX 100 0
LY 100 