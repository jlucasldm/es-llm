{"nome": "Trevamata 2",
  "codigo": "INT-A1",
  "enunciado": " Durante sua aventura pelas Terras-Selváticas,\n Bilbo Bolseiro  e seus amigos anões precisarão\n enfrentar a Trevamata para chegar na Montanha\n Solitária. Porém, sabemos que essa não é uma tarefa\n fácil. Para conseguir atravessar a floresta eles não\n devem, em hipótese alguma, sair da trilha. Por isso,\n Gandalf convocou os alunos de programação da\n UFBA para ajudar Bilbo e seus amigos.\n A Trevamata é  terreno traiçoeiro e sua trilha,\n em alguns trechos, tem o caminho sendo galhos de\n grandes árvores, que tem um limite de peso. Assim,\n terão que passar um por um por esses trechos de\n galhos. Mas, se excedido, quebrado, desloca todos os\n viajantes para fora do percurso. Precisamos então que, dado o peso dos amigos de Bilbo, você diga se\n eles estão aptos para passar pela trilha com segurança. O peso do Bilbo será ignorado.",
  "entrada": " A primeira linha de entrada é composta por um inteiro ‘N’ (1 <= N <= 13), indicando a\n quantidade de amigos de Bilbo. As ‘N’ linhas seguintes contêm, cada uma, uma String Nome e um\n inteiro ‘K’ (50 <= K <= 150), que representam, respectivamente, o nome e o peso de cada amigo de\n Bilbo. Por fim, a última linha contém um inteiro ‘C’ (50 <= C <= 250), indicando a capacidade máxima\n de peso suportado por um determinado galho da estrada",
  "saida": " Caso a capacidade da estrada não seja excedida, o programa deve imprimir a frase “Vamos\n todos encontrar a montanha!”, caso contrário, o programa deve imprimir a frase “Vamos virar\n almoço de aranhas gigantes!”, seguida, dos nomes dos amigos de Bilbo que causaram a tragédia.\n Imprima, nesse caso, um nome por linha após a frase inicial, seguindo a ordem de leitura dada dos\n nomes",
  "casos_exemplo": [{"entrada": " 6\n Thorin 60\n Balin 55\n Dwalin 59\n Fili 68\n Kili 53\n Dori 60\n 250", "saida": "Vamos todos encontrar a montanha!"}, {"entrada": "7\n Nori 50\n Ori 57\n Oin 52\n Gloin 58\n Bifur 55 \nBofur 53\n Bombur 63\n 57", "saida": " Vamos virar almoço de aranhas gigantes!\n Gloin\n Bombur"}],
  "resolucao": "#include <iostream>\n#include <vector>\n#include <iterator>\nusing namespace std;\n\nstruct viajante\n{\n    string nome;\n    int peso;\n};\n\n\nint main(){\n    int qtd_viajantes;\n    int limite_peso;\n    vector<viajante> viajantes;\n    vector<viajante> viajantes_acima_peso;\n\n    cin >> qtd_viajantes;\n\n    for(int i=0; i<qtd_viajantes; i++){\n        viajante v;\n        cin >> v.nome >> v.peso;\n        viajantes.push_back(v);\n    }\n\n    cin >> limite_peso;\n\n    for(vector<viajante>::iterator it = viajantes.begin(); it != viajantes.end(); it++){\n        if(it->peso > limite_peso){\n            viajantes_acima_peso.push_back(*it);\n        }\n    }\n\n    if(viajantes_acima_peso.size() == 0){\n        cout << \"Vamos todos encontrar a montanha!\";\n    }else{\n        cout << \"Vamos virar almoço de aranhas gigantes!\" << endl;\n        for(vector<viajante>::iterator it = viajantes_acima_peso.begin(); it != viajantes_acima_peso.end(); it++){\n            cout << it->nome << endl;\n        }\n    }\n}"
}